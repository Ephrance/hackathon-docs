{
	"info": {
		"_postman_id": "37bdbd31-7e6a-4c3a-a34a-4054566a23ea",
		"name": "HiPipo-Hackathon-Use-Cases",
		"description": "#Author: sridevi.miriyala@modusbox.com#\n\nThis is the collection to use by the participants attending the Women in Fintech - HiPipo hackathon.\nThe whole collection is devided into per group and there are 3 groups corresponding to each currencies UGX, ZMW and EUR. Each group has 5 participants, which makes total 15 participants for this hackathon.\nThe participants are going to check the below usecases:\n\n1. First they will be checking the connectivity to the lab by hitting the request from the connectivity folder. There are 5 requests of this in each group, one request specific to each team.\nThe team is going to pick the one on their name and run and check all the tests are passing.\n\n2. Once the team successfully completes the connectivity test, they will be running the p2p interoperatble usecase.\n    In this use case, a transfer is being sent from a MSISDN from one DFSP/team from one group to a MSISDN from the other DFSP/team in the same group.\n    This is sending money from one person to another person in the same currency, using the MSISDNs.\n    Currently the scripts are created for amountType \"SEND\" and \"RECEIVE\" on one DFSP name. If the team wants to try rest of the combinations, that will give more handson on the applicaiton.\n    But remember, this p2p interoperable case is between the DFSP in teh same group.\n\n    Make sure the tests are all pass before you move on to the next usecase, which is Forex - cross currency usecase.\n    \n3. Merchant Payments. For this usecase, Merchant initiates a request to pay the amount by the customer via requestToPay. This request internally uses GET /parties to resolve the Payer/Sender/Customer of the funds and after that uses POST /transactionRequests which has the amount that the Merchant is requesting. Once this request is received by Payer/Sender/Customer FSP, they send a POST /requestToPayTransfer which internally calls Mojaloop POST /quotes. Once the Merchant FSP responds for POST /quotes with the fees/commision that they charge for the transaction, depending on the customer experience these fees/commission will be exchanged to the customer. Once the customer accpets the fees/commission, the Payer/Sender/Customer FSP sends a subsequent request PUT /requestToPayTransfer/{requestToPayTransferId}. This request internally makes a Mojaloop POST /transfers request which moves the funds from Customers account to Merchant's account.\n\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Group-0-UGX",
			"item": [
				{
					"name": "connectivity_test",
					"item": [
						{
							"name": "emoments-to-payeefsp-MSISDN(UGX)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "55c714a9-8311-4570-8188-36f116054395",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
											"pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e1099eb6-1ae5-470b-9c42-414ec1f45643",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"256111111111\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"17039811907\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"UGX\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://emoments.hipipo.mojaloop-hackathon.io:4001/transfers",
									"protocol": "http",
									"host": [
										"emoments",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4001",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "yougandaltd-to-payeefsp-MSISDN(UGX)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d7f193fb-325b-49eb-a60e-28f38773b425",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
											"pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c7295a62-8f8b-49c0-8faf-7c41b62de391",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"256222222222\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"17039811907\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"UGX\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://yougandaltd.hipipo.mojaloop-hackathon.io:4101/transfers",
									"protocol": "http",
									"host": [
										"yougandaltd",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4101",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "teamspec-to-payeefsp-MSISDN(UGX)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2438d7cc-c514-442c-a2aa-933aa0e59853",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
											"pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f44e14ef-d067-41dd-9776-9ad7de18e9a6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"256333333333\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"17039811907\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"UGX\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://teamspec.hipipo.mojaloop-hackathon.io:4201/transfers",
									"protocol": "http",
									"host": [
										"teamspec",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4201",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "wsacco-to-payeefsp-MSISDN(UGX)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0cc99a28-7cba-4d55-ad6b-a58e317b1d1e",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
											"pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1f1dd11d-2d77-4225-b49a-ee7a9c495f56",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"256444444444\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"17039811907\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"UGX\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://wsacco.hipipo.mojaloop-hackathon.io:4301/transfers",
									"protocol": "http",
									"host": [
										"wsacco",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4301",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "kanzucodeladies-to-payeefsp-MSISDN(UGX)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "41195f88-59ce-46ff-bcf6-b043c271bc52",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
											"pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c6bfa97c-64fa-419e-812d-9ebee6073db3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"256555555555\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"17039811907\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"UGX\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://kanzucodeladies.hipipo.mojaloop-hackathon.io:4401/transfers",
									"protocol": "http",
									"host": [
										"kanzucodeladies",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4401",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "p2p_interoperable",
					"item": [
						{
							"name": "msisdn-to-msisdn",
							"item": [
								{
									"name": "emoments-to-teamspec SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f65f590e-d72a-46e9-8cce-96a8c3bdc8a9",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "954e321d-4266-4f97-8ae2-442ac8e7bf4a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"from\": {\n        \"displayName\": \"emomentsFirst emomentsLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"256111111111\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"256333333333\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"UGX\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
										},
										"url": {
											"raw": "http://emoments.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"emoments",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "emoments-to-teamspec RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "53208929-4ec3-4ed0-ae5f-1a84312eae8a",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "375a9d59-3187-41db-ae52-61456f2af311",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"from\": {\n        \"displayName\": \"emomentsFirst emomentsLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"256111111111\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"256333333333\"\n    },\n    \"amountType\": \"RECEIVE\",\n    \"currency\": \"UGX\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
										},
										"url": {
											"raw": "http://emoments.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"emoments",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "msisdn-to-bankaccount",
							"item": [
								{
									"name": "emoments-to-teamspec SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3736a380-21cc-4462-9172-4324fcba2263",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6e337d52-e3cc-4472-8e38-cfe969fa2d87",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"from\": {\n        \"displayName\": \"emomentsFirst emomentsLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"256111111111\"\n    },\n    \"to\": {\n        \"idType\": \"ACCOUNT_ID\",\n        \"idValue\": \"ACC013333\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"UGX\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
										},
										"url": {
											"raw": "http://emoments.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"emoments",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "emoments-to-teamspec RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "67126086-3d45-4410-825b-442b8bab47b5",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3c546667-f165-40d4-b3be-11f5292e5cf2",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"from\": {\n        \"displayName\": \"emomentsFirst emomentsLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"256111111111\"\n    },\n    \"to\": {\n        \"idType\": \"ACCOUNT_ID\",\n        \"idValue\": \"ACC013333\"\n    },\n    \"amountType\": \"RECEIVE\",\n    \"currency\": \"UGX\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
										},
										"url": {
											"raw": "http://emoments.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"emoments",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "p2p_forex",
					"item": [
						{
							"name": "UGX-to-EUR",
							"item": [
								{
									"name": "emoments-to-affinity(UGX to EUR) SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d25e657d-9b07-4731-a3a4-6c77bf16a49f",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"pm.variables.set('expectedtestfsp4FirstName', 'Testfsp4First');",
													"pm.variables.set('expectedtestfsp4LastName', 'Testfsp4Last');",
													"pm.variables.set('expectedtestfsp4DOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4d809d64-7ce1-4feb-80ae-183d5ac9e146",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" quote extensions are returned\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteRequestExtensions).not.eql(null);",
													"});",
													"",
													"pm.test(\" Payee receive amount is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.payeeReceiveAmount).not.eql(null);",
													"});",
													"",
													"pm.test(\" forex rate is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteResponse.extensionList.extension.value).not.eql(null);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "emoments",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "payeefsp",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"from\": {\n\t\t\"displayName\": \"emomentsFirst emomentsLast\",\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"256111111111\",\n\t\t\"firstName\": \"emomentsFirst\",\n\t\t\"lastName\": \"emomentsLast\",\n\t\t\"dateOfBirth\": \"2010-10-10\"\n\t},\n\t\"to\": {\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"978222222222\"\n\t},\n\t\"amountType\": \"SEND\",\n\t\"currency\": \"UGX\",\n\t\"amount\": \"10\",\n\t\"transactionType\": \"TRANSFER\",\n\t\"initiatorType\": \"CONSUMER\",\n\t\"note\": \"test payment\",\n\t\"homeTransactionId\": \"123ABC\",\n\t\"quoteRequestExtensions\": [\n\t\t{\n\t\t\t\"key\": \"KYCPayerTier\",\n\t\t\t\"value\": \"1\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCNationality\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCOccupation\",\n\t\t\t\"value\": \"Engineer\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmployerName\",\n\t\t\t\"value\": \"Example Corp\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCContactPhone\",\n\t\t\t\"value\": \"1122334455\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmailAddress\",\n\t\t\t\"value\": \"user@mail.com\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCBirthCountry\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress1\",\n\t\t\t\"value\": \"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress2\",\n\t\t\t\"value\": \"11 BP 202 Abidjan 11\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCity\",\n\t\t\t\"value\": \"Abidjan\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCode\",\n\t\t\t\"value\": \"NE1 3TQ\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDType\",\n\t\t\t\"value\": \"PASSPORT\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDValue\",\n\t\t\t\"value\": \"770423742\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerTransferReason\",\n\t\t\t\"value\": \"Bill payment\"\n\t\t}\n\t]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "http://emoments.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"emoments",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "emoments-to-affinity(UGX to EUR) RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "cf2a8e4d-c0f0-4819-8f54-fc0dfb6a914b",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"pm.variables.set('expectedtestfsp4FirstName', 'Testfsp4First');",
													"pm.variables.set('expectedtestfsp4LastName', 'Testfsp4Last');",
													"pm.variables.set('expectedtestfsp4DOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "08c51460-4a68-4d51-a2e3-72647c1c9f30",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" quote extensions are returned\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteRequestExtensions).not.eql(null);",
													"});",
													"",
													"pm.test(\" Payee receive amount is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.payeeReceiveAmount).not.eql(null);",
													"});",
													"",
													"pm.test(\" forex rate is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteResponse.extensionList.extension.value).not.eql(null);",
													"});",
													"",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "emoments",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "payeefsp",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"from\": {\n\t\t\"displayName\": \"emomentsFirst emomentsLast\",\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"256111111111\",\n\t\t\"firstName\": \"emomentsFirst\",\n\t\t\"lastName\": \"emomentsLast\",\n\t\t\"dateOfBirth\": \"2010-10-10\"\n\t},\n\t\"to\": {\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"978222222222\"\n\t},\n\t\"amountType\": \"RECEIVE\",\n\t\"currency\": \"EUR\",\n\t\"amount\": \"10\",\n\t\"transactionType\": \"TRANSFER\",\n\t\"initiatorType\": \"CONSUMER\",\n\t\"note\": \"test payment\",\n\t\"homeTransactionId\": \"123ABC\",\n\t\"quoteRequestExtensions\": [\n\t\t{\n\t\t\t\"key\": \"KYCPayerTier\",\n\t\t\t\"value\": \"1\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCNationality\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCOccupation\",\n\t\t\t\"value\": \"Engineer\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmployerName\",\n\t\t\t\"value\": \"Example Corp\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCContactPhone\",\n\t\t\t\"value\": \"1122334455\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmailAddress\",\n\t\t\t\"value\": \"user@mail.com\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCBirthCountry\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress1\",\n\t\t\t\"value\": \"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress2\",\n\t\t\t\"value\": \"11 BP 202 Abidjan 11\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCity\",\n\t\t\t\"value\": \"Abidjan\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCode\",\n\t\t\t\"value\": \"NE1 3TQ\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDType\",\n\t\t\t\"value\": \"PASSPORT\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDValue\",\n\t\t\t\"value\": \"770423742\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerTransferReason\",\n\t\t\t\"value\": \"Bill payment\"\n\t\t}\n\t]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "http://emoments.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"emoments",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "UGX-to-ZMW",
							"item": [
								{
									"name": "kanzucodeladies-to-greengrab(UGX to ZMW) SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e44a7e4f-01f8-4db2-8342-ee37eb7305df",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"pm.variables.set('expectedtestfsp4FirstName', 'Testfsp4First');",
													"pm.variables.set('expectedtestfsp4LastName', 'Testfsp4Last');",
													"pm.variables.set('expectedtestfsp4DOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8f938364-6cf7-48c6-b4da-13829d6361ee",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" quote extensions are returned\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteRequestExtensions).not.eql(null);",
													"});",
													"",
													"pm.test(\" Payee receive amount is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.payeeReceiveAmount).not.eql(null);",
													"});",
													"",
													"pm.test(\" forex rate is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteResponse.extensionList.extension.value).not.eql(null);",
													"});",
													"",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "emoments",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "payeefsp",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"from\": {\n\t\t\"displayName\": \"emomentsFirst emomentsLast\",\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"256555555555\",\n\t\t\"firstName\": \"emomentsFirst\",\n\t\t\"lastName\": \"emomentsLast\",\n\t\t\"dateOfBirth\": \"2010-10-10\"\n\t},\n\t\"to\": {\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"260111111111\"\n\t},\n\t\"amountType\": \"SEND\",\n\t\"currency\": \"UGX\",\n\t\"amount\": \"10\",\n\t\"transactionType\": \"TRANSFER\",\n\t\"initiatorType\": \"CONSUMER\",\n\t\"note\": \"test payment\",\n\t\"homeTransactionId\": \"123ABC\",\n\t\"quoteRequestExtensions\": [\n\t\t{\n\t\t\t\"key\": \"KYCPayerTier\",\n\t\t\t\"value\": \"1\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCNationality\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCOccupation\",\n\t\t\t\"value\": \"Engineer\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmployerName\",\n\t\t\t\"value\": \"Example Corp\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCContactPhone\",\n\t\t\t\"value\": \"1122334455\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmailAddress\",\n\t\t\t\"value\": \"user@mail.com\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCBirthCountry\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress1\",\n\t\t\t\"value\": \"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress2\",\n\t\t\t\"value\": \"11 BP 202 Abidjan 11\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCity\",\n\t\t\t\"value\": \"Abidjan\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCode\",\n\t\t\t\"value\": \"NE1 3TQ\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDType\",\n\t\t\t\"value\": \"PASSPORT\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDValue\",\n\t\t\t\"value\": \"770423742\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerTransferReason\",\n\t\t\t\"value\": \"Bill payment\"\n\t\t}\n\t]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "http://kanzucodeladies.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"kanzucodeladies",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "kanzucodeladies-to-greengrab(UGX to ZMW) RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "02071e1b-8dc5-49be-af5d-f638a5ad89d8",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"pm.variables.set('expectedtestfsp4FirstName', 'Testfsp4First');",
													"pm.variables.set('expectedtestfsp4LastName', 'Testfsp4Last');",
													"pm.variables.set('expectedtestfsp4DOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "69f0f56f-ee9a-4112-99e7-666d5e347140",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" quote extensions are returned\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteRequestExtensions).not.eql(null);",
													"});",
													"",
													"pm.test(\" Payee receive amount is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.payeeReceiveAmount).not.eql(null);",
													"});",
													"",
													"pm.test(\" forex rate is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteResponse.extensionList.extension.value).not.eql(null);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "emoments",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "payeefsp",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"from\": {\n\t\t\"displayName\": \"emomentsFirst emomentsLast\",\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"256555555555\",\n\t\t\"firstName\": \"emomentsFirst\",\n\t\t\"lastName\": \"emomentsLast\",\n\t\t\"dateOfBirth\": \"2010-10-10\"\n\t},\n\t\"to\": {\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"260111111111\"\n\t},\n\t\"amountType\": \"RECEIVE\",\n\t\"currency\": \"ZMW\",\n\t\"amount\": \"10\",\n\t\"transactionType\": \"TRANSFER\",\n\t\"initiatorType\": \"CONSUMER\",\n\t\"note\": \"test payment\",\n\t\"homeTransactionId\": \"123ABC\",\n\t\"quoteRequestExtensions\": [\n\t\t{\n\t\t\t\"key\": \"KYCPayerTier\",\n\t\t\t\"value\": \"1\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCNationality\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCOccupation\",\n\t\t\t\"value\": \"Engineer\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmployerName\",\n\t\t\t\"value\": \"Example Corp\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCContactPhone\",\n\t\t\t\"value\": \"1122334455\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmailAddress\",\n\t\t\t\"value\": \"user@mail.com\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCBirthCountry\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress1\",\n\t\t\t\"value\": \"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress2\",\n\t\t\t\"value\": \"11 BP 202 Abidjan 11\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCity\",\n\t\t\t\"value\": \"Abidjan\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCode\",\n\t\t\t\"value\": \"NE1 3TQ\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDType\",\n\t\t\t\"value\": \"PASSPORT\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDValue\",\n\t\t\t\"value\": \"770423742\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerTransferReason\",\n\t\t\t\"value\": \"Bill payment\"\n\t\t}\n\t]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "http://kanzucodeladies.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"kanzucodeladies",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "payee_initiated_payments",
					"item": [
						{
							"name": "merchant_payments(merchant-to-MSISDN)",
							"item": [
								{
									"name": "yougandaltd-to-teamspec",
									"item": [
										{
											"name": "Yougandaltd-to-teamspec- POST /requestToPay",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "53f8746d-7e5b-456c-9906-e2c973e41feb",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"",
															"pm.test(`homeTransactionId is: ${pm.variables.get('homeTransactionId')}`, function () {",
															"    pm.expect(jsonData.homeTransactionId).to.eql(pm.variables.get('homeTransactionId'));",
															"});",
															"",
															"pm.test(`from.idType is BUSINESS`, function () {",
															"    pm.expect(jsonData.from.idType).to.eql('BUSINESS');",
															"    pm.environment.set('requestToPayInitiatorIdType',jsonData.from.idType);",
															"});",
															"",
															"",
															"pm.test(`to.idType is MSISDN`, function () {",
															"    pm.expect(jsonData.to.idType).to.eql('MSISDN');",
															"});",
															"",
															"",
															"pm.test(`amountType is SEND`, function () {",
															"    pm.expect(jsonData.amountType).to.eql('SEND');",
															"});",
															"",
															"pm.test(`currency is ${pm.environment.get('currency')}`, function () {",
															"    pm.expect(jsonData.currency).to.eql(pm.environment.get('currency'));",
															"});",
															"",
															"pm.test(`amount is 10`, function () {",
															"    pm.expect(jsonData.amount).to.eql('10');",
															"});",
															"",
															"pm.test(`scenario is PAYMENT`, function () {",
															"    pm.expect(jsonData.scenario).to.eql('PAYMENT');",
															"});",
															"",
															"pm.test(`initiator is PAYEE`, function () {",
															"    pm.expect(jsonData.initiator).to.eql('PAYEE');",
															"});",
															"",
															"pm.test(`initiatorType is BUSINESS`, function () {",
															"    pm.expect(jsonData.initiatorType).to.eql('BUSINESS');",
															"});",
															"",
															"pm.test(`transactionRequestId is not null`, function () {",
															"    pm.expect(jsonData.transactionRequestId).to.not.equal('');",
															"    pm.environment.set('transactionRequestId',jsonData.transactionRequestId);",
															"});",
															"",
															"pm.test(`currentState is COMPLETED`, function () {",
															"    pm.expect(jsonData.currentState).to.eql('COMPLETED');",
															"});",
															"",
															"pm.test(`requestToPayState is RECEIVED`, function () {",
															"    pm.expect(jsonData.requestToPayState).to.eql('RECEIVED');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "21864f46-c7dd-49d4-a770-7c173b704e13",
														"exec": [
															"",
															"var uuid = require('uuid');",
															"pm.variables.set('homeTransactionId',uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"homeTransactionId\": \"{{homeTransactionId}}\",\n    \"from\": {\n        \"idType\": \"BUSINESS\",\n        \"idValue\": \"yougandaltdMerchant\",\n        \"displayName\": \"yougandaltd BusinessSolutions\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"256333333333\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"UGX\",\n    \"amount\": \"10\",\n    \"scenario\":\"PAYMENT\",\n    \"initiator\":\"PAYEE\",\n    \"initiatorType\":\"BUSINESS\",\n    \"note\": \"test payment\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://yougandaltd.hipipo.mojaloop-hackathon.io:4101/requestToPay",
													"protocol": "http",
													"host": [
														"yougandaltd",
														"hipipo",
														"mojaloop-hackathon",
														"io"
													],
													"port": "4101",
													"path": [
														"requestToPay"
													]
												}
											},
											"response": []
										},
										{
											"name": "teamspec - POST /requestToPayTransfer SEND",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f9b2b081-801e-431f-81bc-80c44099dafd",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"",
															"pm.environment.set('transferId',jsonData.transferId);",
															"",
															"pm.test(`requestToPayTransactionId is: ${pm.variables.get('transactionRequestId')}`, function () {",
															"    pm.expect(jsonData.requestToPayTransactionId).to.eql(pm.variables.get('transactionRequestId'));",
															"});",
															"",
															"pm.test(`from.idType is MSISDN`, function () {",
															"    pm.expect(jsonData.from.idType).to.eql('MSISDN');",
															"});",
															"",
															"",
															"pm.test(`to.idType is BUSINESS`, function () {",
															"    pm.expect(jsonData.to.idType).to.eql('BUSINESS');",
															"});",
															"",
															"",
															"",
															"pm.test(`amountType is SEND`, function () {",
															"    pm.expect(jsonData.amountType).to.eql('SEND');",
															"});",
															"",
															"pm.test(`currency is ${pm.environment.get('currency')}`, function () {",
															"    pm.expect(jsonData.currency).to.eql(pm.environment.get('currency'));",
															"});",
															"",
															"",
															"pm.test(`scenario is PAYMENT`, function () {",
															"    pm.expect(jsonData.scenario).to.eql('PAYMENT');",
															"});",
															"",
															"pm.test(`initiator is PAYEE`, function () {",
															"    pm.expect(jsonData.initiator).to.eql('PAYEE');",
															"});",
															"",
															"pm.test(`initiatorType is BUSINESS`, function () {",
															"    pm.expect(jsonData.initiatorType).to.eql('BUSINESS');",
															"});",
															"",
															"pm.test(`currentState is WAITING_FOR_QUOTE_ACCEPTANCE`, function () {",
															"    pm.expect(jsonData.currentState).to.eql('WAITING_FOR_QUOTE_ACCEPTANCE');",
															"});",
															"",
															"pm.test(`quoteResponse is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.transferAmount.currency is ${pm.environment.get('currency')}`, function () {",
															"    pm.expect(jsonData.quoteResponse.transferAmount.currency).to.eql(pm.environment.get('currency'));",
															"});",
															"",
															"pm.test(`quoteResponse.expiration is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.expiration).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.ilpPacket is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.ilpPacket).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.condition is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.condition).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.payeeFspFee is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.payeeFspFee).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.payeeFspCommission is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.payeeFspCommission).to.not.equal(null);",
															"});",
															"",
															"pm.test(`fulfil is  null`, function () {",
															"    pm.expect(jsonData.fulfil).to.equal(undefined);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"requestToPayTransactionId\": \"{{transactionRequestId}}\",\n  \"from\": {\n    \"displayName\": \"TeamSpec\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"256333333333\"\n  },\n  \"to\": {\n    \"idType\": \"{{requestToPayInitiatorIdType}}\",\n    \"idValue\": \"yougandaltdMerchant\",\n    \"fspId\": \"yougandaltd\"\n  },\n  \"amountType\": \"SEND\",\n  \"currency\": \"{{currency}}\",\n  \"amount\": \"10\",\n  \"scenario\":\"PAYMENT\",\n  \"initiator\":\"PAYEE\",\n  \"initiatorType\":\"BUSINESS\",\n  \"note\": \"test payment\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://teamspec.hipipo.mojaloop-hackathon.io:4201/requestToPayTransfer",
													"protocol": "http",
													"host": [
														"teamspec",
														"hipipo",
														"mojaloop-hackathon",
														"io"
													],
													"port": "4201",
													"path": [
														"requestToPayTransfer"
													]
												}
											},
											"response": []
										},
										{
											"name": "teamspec - PUT /requestToPayTransfer/{Id}",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d8bcc070-21b8-400b-b761-9c5f9089db44",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"",
															"pm.environment.set('transferId',jsonData.transferId);",
															"",
															"pm.test(`requestToPayTransactionId is: ${pm.variables.get('transactionRequestId')}`, function () {",
															"    pm.expect(jsonData.requestToPayTransactionId).to.eql(pm.variables.get('transactionRequestId'));",
															"});",
															"",
															"pm.test(`from.idType is MSISDN`, function () {",
															"    pm.expect(jsonData.from.idType).to.eql('MSISDN');",
															"});",
															"",
															"pm.test(`to.idType is BISUNESS`, function () {",
															"    pm.expect(jsonData.to.idType).to.eql('BUSINESS');",
															"});",
															"",
															"",
															"pm.test(`amountType is SEND`, function () {",
															"    pm.expect(jsonData.amountType).to.eql('SEND');",
															"});",
															"",
															"pm.test(`currency is ${pm.environment.get('currency')}`, function () {",
															"    pm.expect(jsonData.currency).to.eql(pm.environment.get('currency'));",
															"});",
															"",
															"pm.test(`scenario is PAYMENT`, function () {",
															"    pm.expect(jsonData.scenario).to.eql('PAYMENT');",
															"});",
															"",
															"pm.test(`initiator is PAYEE`, function () {",
															"    pm.expect(jsonData.initiator).to.eql('PAYEE');",
															"});",
															"",
															"pm.test(`initiatorType is BUSINESS`, function () {",
															"    pm.expect(jsonData.initiatorType).to.eql('BUSINESS');",
															"});",
															"",
															"pm.test(`currentState is COMPLETED`, function () {",
															"    pm.expect(jsonData.currentState).to.eql('COMPLETED');",
															"});",
															"",
															"pm.test(`quoteResponse is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.transferAmount.currency is ${pm.environment.get('currency')}`, function () {",
															"    pm.expect(jsonData.quoteResponse.transferAmount.currency).to.eql(pm.environment.get('currency'));",
															"});",
															"",
															"pm.test(`quoteResponse.expiration is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.expiration).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.ilpPacket is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.ilpPacket).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.condition is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.condition).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.payeeFspFee is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.payeeFspFee).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.payeeFspCommission is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.payeeFspCommission).to.not.equal(null);",
															"});",
															"",
															"pm.test(`otpResponse is null`, function () {",
															"    pm.expect(jsonData.otpResponse).to.eql(undefined);",
															"});",
															"",
															"pm.test(`fulfil is not null`, function () {",
															"    pm.expect(jsonData.fulfil).to.not.equal(null);",
															"});",
															"",
															"pm.test(`fulfil.completedTimestamp is not null`, function () {",
															"    pm.expect(jsonData.fulfil.completedTimestamp).to.not.equal(null);",
															"});",
															"",
															"pm.test(`fulfil.transferState is COMMITTED`, function () {",
															"    pm.expect(jsonData.fulfil.transferState).to.eql('COMMITTED');",
															"});",
															"",
															"pm.test(`fulfil.fulfilment is not null`, function () {",
															"    pm.expect(jsonData.fulfil.fulfilment).to.not.equal(null);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"acceptQuote\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://teamspec.hipipo.mojaloop-hackathon.io:4201/requestToPayTransfer/{{transactionRequestId}}",
													"protocol": "http",
													"host": [
														"teamspec",
														"hipipo",
														"mojaloop-hackathon",
														"io"
													],
													"port": "4201",
													"path": [
														"requestToPayTransfer",
														"{{transactionRequestId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0efe61a2-915c-4c39-b471-c7949a266970",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "13d31dbc-9099-4f3f-ba91-3dbddbd608f6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "#Author: sridevi.miriyala@modusbox.com#\nThese are called Merchant payments.\nThese are between the same currency DFSPs, no cross currency is allowed/tested at the moment.\nSo, a Merchant(BUSINESS_ID) from a DFSP  in Group-0 can send to a MSISDN from another DFSP in Group-0.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9405573f-36de-44b6-b1a7-eb9b8e91a166",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d49df581-fac8-4186-8204-7106fc9a4b05",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Group-1-ZMW",
			"item": [
				{
					"name": "connectivity_test",
					"item": [
						{
							"name": "greengrab-to-testfsp4-MSISDN(ZMW)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "424838d3-b08e-45d4-a747-e12e7bf6a975",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
											"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ee15e872-afcc-4872-8167-53af0919140c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"260111111111\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"610298765432\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"ZMW\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://greengrab.hipipo.mojaloop-hackathon.io:4001/transfers",
									"protocol": "http",
									"host": [
										"greengrab",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4001",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "achors-to-testfsp4-MSISDN(ZMW)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "08247ba7-52ea-4a08-9bf9-19afc7466f0f",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
											"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5b65af95-2621-4c1c-93dc-b810ac30f44b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"260222222222\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"610298765432\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"ZMW\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://achors.hipipo.mojaloop-hackathon.io:4101/transfers",
									"protocol": "http",
									"host": [
										"achors",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4101",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "ugmart-to-testfsp4-MSISDN(ZMW)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c114c823-1d26-4a60-a578-3fee1a5c6d48",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
											"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "88a013b3-189a-4a91-8a33-d3a624e9762a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"260333333333\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"610298765432\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"ZMW\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://ugmart.hipipo.mojaloop-hackathon.io:4201/transfers",
									"protocol": "http",
									"host": [
										"ugmart",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4201",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "hackgirls-to-testfsp4-MSISDN(ZMW)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f13c9354-7ba3-4aea-b5f2-4526c87f9006",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
											"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "abb5da88-e704-4a0a-b836-d13feecbde59",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"260444444444\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"610298765432\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"ZMW\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://hackgirls.hipipo.mojaloop-hackathon.io:4301/transfers",
									"protocol": "http",
									"host": [
										"hackgirls",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4301",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "kameeza-to-testfsp4-MSISDN(ZMW)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d515b4ca-8182-4f67-9036-9f2da287c3a8",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
											"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "db431fd5-5996-40f1-ae87-c0bbdb5343f1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"260555555555\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"610298765432\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"ZMW\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://kameeza.hipipo.mojaloop-hackathon.io:4401/transfers",
									"protocol": "http",
									"host": [
										"kameeza",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4401",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "p2p_interoperable",
					"item": [
						{
							"name": "msisdn-to-msisdn",
							"item": [
								{
									"name": "greengrab-to-ugmart SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8f18f5c1-9b0d-4c9b-a2ef-cd15e89260a9",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bf395651-7f8d-472a-8053-b1b4932676e3",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"from\": {\n        \"displayName\": \"greengrabFirst greengrabLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"260111111111\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"260333333333\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"ZMW\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
										},
										"url": {
											"raw": "http://greengrab.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"greengrab",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "greengrab-to-ugmart RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9ed526fc-2d06-4638-aa87-b2a6ed08af18",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4cc16acd-bb22-4704-8199-9753f8d43702",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"from\": {\n        \"displayName\": \"greengrabFirst greengrabLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"260111111111\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"260333333333\"\n    },\n    \"amountType\": \"RECEIVE\",\n    \"currency\": \"ZMW\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
										},
										"url": {
											"raw": "http://greengrab.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"greengrab",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "msisdn-to-bankaccount",
							"item": [
								{
									"name": "greengrab-to-ugmart SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bd9017d1-7883-4db9-8cc0-e6b3f048ce14",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5c16a2fc-fba6-4aa6-8ba4-d8bac4cb71a7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"from\": {\n        \"displayName\": \"greengrabFirst greengrabLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"260111111111\"\n    },\n    \"to\": {\n        \"idType\": \"ACCOUNT_ID\",\n        \"idValue\": \"ACC023333\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"ZMW\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
										},
										"url": {
											"raw": "http://greengrab.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"greengrab",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "greengrab-to-ugmart RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1d56cfa9-61f4-475f-af2b-eddcd6d6fd6c",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "56dc516d-416a-44ed-885a-17e8a2fd0539",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"from\": {\n        \"displayName\": \"greengrabFirst greengrabLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"260111111111\"\n    },\n    \"to\": {\n        \"idType\": \"ACCOUNT_ID\",\n        \"idValue\": \"ACC023333\"\n    },\n    \"amountType\": \"RECEIVE\",\n    \"currency\": \"ZMW\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
										},
										"url": {
											"raw": "http://greengrab.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"greengrab",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "p2p_forex",
					"item": [
						{
							"name": "ZMW-to-UGX",
							"item": [
								{
									"name": "ugmart-to-kanzucodeladies(ZMW to UGX) SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fed57620-4d59-4aa2-ba13-b689cd6080a3",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"pm.variables.set('expectedtestfsp4FirstName', 'Testfsp4First');",
													"pm.variables.set('expectedtestfsp4LastName', 'Testfsp4Last');",
													"pm.variables.set('expectedtestfsp4DOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c0ea9b2e-7011-452d-a271-c8b5af524510",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" quote extensions are returned\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteRequestExtensions).not.eql(null);",
													"});",
													"",
													"pm.test(\" Payee receive amount is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.payeeReceiveAmount).not.eql(null);",
													"});",
													"",
													"pm.test(\" forex rate is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteResponse.extensionList.extension.value).not.eql(null);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{SIM3_NAME}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{SIM4_NAME}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"from\": {\n\t\t\"displayName\": \"Testfsp3First Testfsp3Last\",\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"260333333333\",\n\t\t\"firstName\": \"Testfsp3First\",\n\t\t\"lastName\": \"Testfsp3Last\",\n\t\t\"dateOfBirth\": \"2010-10-10\"\n\t},\n\t\"to\": {\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"256555555555\"\n\t},\n\t\"amountType\": \"SEND\",\n\t\"currency\": \"ZMW\",\n\t\"amount\": \"10\",\n\t\"transactionType\": \"TRANSFER\",\n\t\"initiatorType\": \"CONSUMER\",\n\t\"note\": \"test payment\",\n\t\"homeTransactionId\": \"123ABC\",\n\t\"quoteRequestExtensions\": [\n\t\t{\n\t\t\t\"key\": \"KYCPayerTier\",\n\t\t\t\"value\": \"1\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCNationality\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCOccupation\",\n\t\t\t\"value\": \"Engineer\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmployerName\",\n\t\t\t\"value\": \"Example Corp\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCContactPhone\",\n\t\t\t\"value\": \"1122334455\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmailAddress\",\n\t\t\t\"value\": \"user@mail.com\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCBirthCountry\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress1\",\n\t\t\t\"value\": \"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress2\",\n\t\t\t\"value\": \"11 BP 202 Abidjan 11\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCity\",\n\t\t\t\"value\": \"Abidjan\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCode\",\n\t\t\t\"value\": \"NE1 3TQ\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDType\",\n\t\t\t\"value\": \"PASSPORT\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDValue\",\n\t\t\t\"value\": \"770423742\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerTransferReason\",\n\t\t\t\"value\": \"Bill payment\"\n\t\t}\n\t]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "http://ugmart.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"ugmart",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "ugmart-to-kanzucodeladies(ZMW to UGX) RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "041f6bde-525d-4bfd-b8e0-bb03ef019bab",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"pm.variables.set('expectedtestfsp4FirstName', 'Testfsp4First');",
													"pm.variables.set('expectedtestfsp4LastName', 'Testfsp4Last');",
													"pm.variables.set('expectedtestfsp4DOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b136a513-39ae-4414-bf5b-3dd098d18550",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" quote extensions are returned\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteRequestExtensions).not.eql(null);",
													"});",
													"",
													"pm.test(\" Payee receive amount is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.payeeReceiveAmount).not.eql(null);",
													"});",
													"",
													"pm.test(\" forex rate is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteResponse.extensionList.extension.value).not.eql(null);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{SIM3_NAME}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{SIM4_NAME}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"from\": {\n\t\t\"displayName\": \"Testfsp3First Testfsp3Last\",\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"260333333333\",\n\t\t\"firstName\": \"Testfsp3First\",\n\t\t\"lastName\": \"Testfsp3Last\",\n\t\t\"dateOfBirth\": \"2010-10-10\"\n\t},\n\t\"to\": {\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"256555555555\"\n\t},\n\t\"amountType\": \"RECEIVE\",\n\t\"currency\": \"UGX\",\n\t\"amount\": \"10\",\n\t\"transactionType\": \"TRANSFER\",\n\t\"initiatorType\": \"CONSUMER\",\n\t\"note\": \"test payment\",\n\t\"homeTransactionId\": \"123ABC\",\n\t\"quoteRequestExtensions\": [\n\t\t{\n\t\t\t\"key\": \"KYCPayerTier\",\n\t\t\t\"value\": \"1\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCNationality\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCOccupation\",\n\t\t\t\"value\": \"Engineer\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmployerName\",\n\t\t\t\"value\": \"Example Corp\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCContactPhone\",\n\t\t\t\"value\": \"1122334455\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmailAddress\",\n\t\t\t\"value\": \"user@mail.com\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCBirthCountry\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress1\",\n\t\t\t\"value\": \"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress2\",\n\t\t\t\"value\": \"11 BP 202 Abidjan 11\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCity\",\n\t\t\t\"value\": \"Abidjan\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCode\",\n\t\t\t\"value\": \"NE1 3TQ\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDType\",\n\t\t\t\"value\": \"PASSPORT\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDValue\",\n\t\t\t\"value\": \"770423742\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerTransferReason\",\n\t\t\t\"value\": \"Bill payment\"\n\t\t}\n\t]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "http://ugmart.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"ugmart",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "ZMW-to-EUR",
							"item": [
								{
									"name": "hackgirls-to-skycode(ZMW to EUR) SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "51b0d2ba-dd39-4c77-8bbb-fbc700f9c693",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"pm.variables.set('expectedtestfsp4FirstName', 'Testfsp4First');",
													"pm.variables.set('expectedtestfsp4LastName', 'Testfsp4Last');",
													"pm.variables.set('expectedtestfsp4DOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fe7bab7f-cd64-4451-8b21-5a9fb5ffbb93",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" quote extensions are returned\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteRequestExtensions).not.eql(null);",
													"});",
													"",
													"pm.test(\" Payee receive amount is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.payeeReceiveAmount).not.eql(null);",
													"});",
													"",
													"pm.test(\" forex rate is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteResponse.extensionList.extension.value).not.eql(null);",
													"});",
													"",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{SIM3_NAME}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{SIM4_NAME}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"from\": {\n\t\t\"displayName\": \"Testfsp3First Testfsp3Last\",\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"260444444444\",\n\t\t\"firstName\": \"Testfsp3First\",\n\t\t\"lastName\": \"Testfsp3Last\",\n\t\t\"dateOfBirth\": \"2010-10-10\"\n\t},\n\t\"to\": {\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"978333333333\"\n\t},\n\t\"amountType\": \"SEND\",\n\t\"currency\": \"ZMW\",\n\t\"amount\": \"10\",\n\t\"transactionType\": \"TRANSFER\",\n\t\"initiatorType\": \"CONSUMER\",\n\t\"note\": \"test payment\",\n\t\"homeTransactionId\": \"123ABC\",\n\t\"quoteRequestExtensions\": [\n\t\t{\n\t\t\t\"key\": \"KYCPayerTier\",\n\t\t\t\"value\": \"1\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCNationality\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCOccupation\",\n\t\t\t\"value\": \"Engineer\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmployerName\",\n\t\t\t\"value\": \"Example Corp\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCContactPhone\",\n\t\t\t\"value\": \"1122334455\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmailAddress\",\n\t\t\t\"value\": \"user@mail.com\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCBirthCountry\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress1\",\n\t\t\t\"value\": \"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress2\",\n\t\t\t\"value\": \"11 BP 202 Abidjan 11\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCity\",\n\t\t\t\"value\": \"Abidjan\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCode\",\n\t\t\t\"value\": \"NE1 3TQ\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDType\",\n\t\t\t\"value\": \"PASSPORT\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDValue\",\n\t\t\t\"value\": \"770423742\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerTransferReason\",\n\t\t\t\"value\": \"Bill payment\"\n\t\t}\n\t]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "http://hackgirls.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"hackgirls",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "hackgirls-to-skycode(ZMW to EUR) RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "27410cc2-fef6-4d87-97fe-e654015c0bca",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"pm.variables.set('expectedtestfsp4FirstName', 'Testfsp4First');",
													"pm.variables.set('expectedtestfsp4LastName', 'Testfsp4Last');",
													"pm.variables.set('expectedtestfsp4DOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5c73d2f7-5317-4ee1-87e3-4b46e505b1cc",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" quote extensions are returned\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteRequestExtensions).not.eql(null);",
													"});",
													"",
													"pm.test(\" Payee receive amount is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.payeeReceiveAmount).not.eql(null);",
													"});",
													"",
													"pm.test(\" forex rate is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteResponse.extensionList.extension.value).not.eql(null);",
													"});",
													"",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{SIM3_NAME}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{SIM4_NAME}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"from\": {\n\t\t\"displayName\": \"Testfsp3First Testfsp3Last\",\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"260444444444\",\n\t\t\"firstName\": \"Testfsp3First\",\n\t\t\"lastName\": \"Testfsp3Last\",\n\t\t\"dateOfBirth\": \"2010-10-10\"\n\t},\n\t\"to\": {\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"978333333333\"\n\t},\n\t\"amountType\": \"RECEIVE\",\n\t\"currency\": \"EUR\",\n\t\"amount\": \"10\",\n\t\"transactionType\": \"TRANSFER\",\n\t\"initiatorType\": \"CONSUMER\",\n\t\"note\": \"test payment\",\n\t\"homeTransactionId\": \"123ABC\",\n\t\"quoteRequestExtensions\": [\n\t\t{\n\t\t\t\"key\": \"KYCPayerTier\",\n\t\t\t\"value\": \"1\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCNationality\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCOccupation\",\n\t\t\t\"value\": \"Engineer\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmployerName\",\n\t\t\t\"value\": \"Example Corp\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCContactPhone\",\n\t\t\t\"value\": \"1122334455\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmailAddress\",\n\t\t\t\"value\": \"user@mail.com\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCBirthCountry\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress1\",\n\t\t\t\"value\": \"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress2\",\n\t\t\t\"value\": \"11 BP 202 Abidjan 11\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCity\",\n\t\t\t\"value\": \"Abidjan\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCode\",\n\t\t\t\"value\": \"NE1 3TQ\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDType\",\n\t\t\t\"value\": \"PASSPORT\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDValue\",\n\t\t\t\"value\": \"770423742\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerTransferReason\",\n\t\t\t\"value\": \"Bill payment\"\n\t\t}\n\t]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "http://hackgirls.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"hackgirls",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "payee_initiated_payments",
					"item": [
						{
							"name": "business",
							"item": [
								{
									"name": "achors-to-kameeza",
									"item": [
										{
											"name": "achors-to-kameeza- POST /requestToPay",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da9cf533-586a-4412-9ec5-951c952c5e9b",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"",
															"pm.test(`homeTransactionId is: ${pm.variables.get('homeTransactionId')}`, function () {",
															"    pm.expect(jsonData.homeTransactionId).to.eql(pm.variables.get('homeTransactionId'));",
															"});",
															"",
															"pm.test(`from.idType is BUSINESS`, function () {",
															"    pm.expect(jsonData.from.idType).to.eql('BUSINESS');",
															"    pm.environment.set('requestToPayInitiatorIdType',jsonData.from.idType);",
															"});",
															"",
															"",
															"pm.test(`to.idType is MSISDN`, function () {",
															"    pm.expect(jsonData.to.idType).to.eql('MSISDN');",
															"});",
															"",
															"",
															"pm.test(`amountType is SEND`, function () {",
															"    pm.expect(jsonData.amountType).to.eql('SEND');",
															"});",
															"",
															"pm.test(`currency is ZMW`, function () {",
															"    pm.expect(jsonData.currency).to.eql ('ZMW');",
															"});",
															"",
															"pm.test(`amount is 10`, function () {",
															"    pm.expect(jsonData.amount).to.eql('10');",
															"});",
															"",
															"pm.test(`scenario is PAYMENT`, function () {",
															"    pm.expect(jsonData.scenario).to.eql('PAYMENT');",
															"});",
															"",
															"pm.test(`initiator is PAYEE`, function () {",
															"    pm.expect(jsonData.initiator).to.eql('PAYEE');",
															"});",
															"",
															"pm.test(`initiatorType is BUSINESS`, function () {",
															"    pm.expect(jsonData.initiatorType).to.eql('BUSINESS');",
															"});",
															"",
															"pm.test(`transactionRequestId is not null`, function () {",
															"    pm.expect(jsonData.transactionRequestId).to.not.equal('');",
															"    pm.environment.set('transactionRequestId',jsonData.transactionRequestId);",
															"});",
															"",
															"pm.test(`currentState is COMPLETED`, function () {",
															"    pm.expect(jsonData.currentState).to.eql('COMPLETED');",
															"});",
															"",
															"pm.test(`requestToPayState is RECEIVED`, function () {",
															"    pm.expect(jsonData.requestToPayState).to.eql('RECEIVED');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1474d904-5d1c-41b9-be4c-2f3dc931f05b",
														"exec": [
															"",
															"var uuid = require('uuid');",
															"pm.variables.set('homeTransactionId',uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"homeTransactionId\": \"{{homeTransactionId}}\",\n    \"from\": {\n        \"idType\": \"BUSINESS\",\n        \"idValue\": \"achorsMerchant\",\n        \"displayName\": \"Achors Mobiles\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"260555555555\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"ZMW\",\n    \"amount\": \"10\",\n    \"scenario\":\"PAYMENT\",\n    \"initiator\":\"PAYEE\",\n    \"initiatorType\":\"BUSINESS\",\n    \"note\": \"test payment\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://achors.hipipo.mojaloop-hackathon.io:4101/requestToPay",
													"protocol": "http",
													"host": [
														"achors",
														"hipipo",
														"mojaloop-hackathon",
														"io"
													],
													"port": "4101",
													"path": [
														"requestToPay"
													]
												}
											},
											"response": []
										},
										{
											"name": "kameeza - POST /requestToPayTransfer SEND",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "835e870e-5100-4535-a364-36c5bbb26396",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"",
															"pm.environment.set('transferId',jsonData.transferId);",
															"",
															"pm.test(`requestToPayTransactionId is: ${pm.variables.get('transactionRequestId')}`, function () {",
															"    pm.expect(jsonData.requestToPayTransactionId).to.eql(pm.variables.get('transactionRequestId'));",
															"});",
															"",
															"pm.test(`from.idType is MSISDN`, function () {",
															"    pm.expect(jsonData.from.idType).to.eql('MSISDN');",
															"});",
															"",
															"",
															"pm.test(`to.idType is BUSINESS`, function () {",
															"    pm.expect(jsonData.to.idType).to.eql('BUSINESS');",
															"});",
															"",
															"",
															"",
															"pm.test(`amountType is SEND`, function () {",
															"    pm.expect(jsonData.amountType).to.eql('SEND');",
															"});",
															"",
															"pm.test(`currency is ZMW}`, function () {",
															"    pm.expect(jsonData.currency).to.eql ('ZMW');",
															"});",
															"",
															"",
															"pm.test(`scenario is PAYMENT`, function () {",
															"    pm.expect(jsonData.scenario).to.eql('PAYMENT');",
															"});",
															"",
															"pm.test(`initiator is PAYEE`, function () {",
															"    pm.expect(jsonData.initiator).to.eql('PAYEE');",
															"});",
															"",
															"pm.test(`initiatorType is BUSINESS`, function () {",
															"    pm.expect(jsonData.initiatorType).to.eql('BUSINESS');",
															"});",
															"",
															"pm.test(`currentState is WAITING_FOR_QUOTE_ACCEPTANCE`, function () {",
															"    pm.expect(jsonData.currentState).to.eql('WAITING_FOR_QUOTE_ACCEPTANCE');",
															"});",
															"",
															"pm.test(`quoteResponse is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.transferAmount.currency is ZMW}`, function () {",
															"    pm.expect(jsonData.quoteResponse.transferAmount.currency).to.eql('ZMW');",
															"});",
															"",
															"pm.test(`quoteResponse.expiration is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.expiration).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.ilpPacket is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.ilpPacket).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.condition is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.condition).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.payeeFspFee is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.payeeFspFee).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.payeeFspCommission is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.payeeFspCommission).to.not.equal(null);",
															"});",
															"",
															"pm.test(`fulfil is  null`, function () {",
															"    pm.expect(jsonData.fulfil).to.equal(undefined);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"requestToPayTransactionId\": \"{{transactionRequestId}}\",\n  \"from\": {\n    \"displayName\": \"Kameeza\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"260555555555\"\n  },\n  \"to\": {\n    \"idType\": \"{{requestToPayInitiatorIdType}}\",\n    \"idValue\": \"achorsMerchant\",\n    \"fspId\": \"achors\"\n  },\n  \"amountType\": \"SEND\",\n  \"currency\": \"ZMW\",\n  \"amount\": \"10\",\n  \"scenario\":\"PAYMENT\",\n  \"initiator\":\"PAYEE\",\n  \"initiatorType\":\"BUSINESS\",\n  \"note\": \"test payment\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://kameeza.hipipo.mojaloop-hackathon.io:4401/requestToPayTransfer",
													"protocol": "http",
													"host": [
														"kameeza",
														"hipipo",
														"mojaloop-hackathon",
														"io"
													],
													"port": "4401",
													"path": [
														"requestToPayTransfer"
													]
												}
											},
											"response": []
										},
										{
											"name": "kameeza - PUT /requestToPayTransfer/{Id}",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "22e5efe5-c2da-46fc-8b0a-c01175034ef9",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"",
															"pm.environment.set('transferId',jsonData.transferId);",
															"",
															"pm.test(`requestToPayTransactionId is: ${pm.variables.get('transactionRequestId')}`, function () {",
															"    pm.expect(jsonData.requestToPayTransactionId).to.eql(pm.variables.get('transactionRequestId'));",
															"});",
															"",
															"pm.test(`from.idType is MSISDN`, function () {",
															"    pm.expect(jsonData.from.idType).to.eql('MSISDN');",
															"});",
															"",
															"pm.test(`to.idType is BISUNESS`, function () {",
															"    pm.expect(jsonData.to.idType).to.eql('BUSINESS');",
															"});",
															"",
															"",
															"pm.test(`amountType is SEND`, function () {",
															"    pm.expect(jsonData.amountType).to.eql('SEND');",
															"});",
															"",
															"pm.test(`currency is ZMW}`, function () {",
															"    pm.expect(jsonData.currency).to.eql('ZMW');",
															"});",
															"",
															"pm.test(`scenario is PAYMENT`, function () {",
															"    pm.expect(jsonData.scenario).to.eql('PAYMENT');",
															"});",
															"",
															"pm.test(`initiator is PAYEE`, function () {",
															"    pm.expect(jsonData.initiator).to.eql('PAYEE');",
															"});",
															"",
															"pm.test(`initiatorType is BUSINESS`, function () {",
															"    pm.expect(jsonData.initiatorType).to.eql('BUSINESS');",
															"});",
															"",
															"pm.test(`currentState is COMPLETED`, function () {",
															"    pm.expect(jsonData.currentState).to.eql('COMPLETED');",
															"});",
															"",
															"pm.test(`quoteResponse is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.transferAmount.currency is ZMW}`, function () {",
															"    pm.expect(jsonData.quoteResponse.transferAmount.currency).to.eql('ZMW');",
															"});",
															"",
															"pm.test(`quoteResponse.expiration is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.expiration).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.ilpPacket is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.ilpPacket).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.condition is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.condition).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.payeeFspFee is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.payeeFspFee).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.payeeFspCommission is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.payeeFspCommission).to.not.equal(null);",
															"});",
															"",
															"pm.test(`otpResponse is null`, function () {",
															"    pm.expect(jsonData.otpResponse).to.eql(undefined);",
															"});",
															"",
															"pm.test(`fulfil is not null`, function () {",
															"    pm.expect(jsonData.fulfil).to.not.equal(null);",
															"});",
															"",
															"pm.test(`fulfil.completedTimestamp is not null`, function () {",
															"    pm.expect(jsonData.fulfil.completedTimestamp).to.not.equal(null);",
															"});",
															"",
															"pm.test(`fulfil.transferState is COMMITTED`, function () {",
															"    pm.expect(jsonData.fulfil.transferState).to.eql('COMMITTED');",
															"});",
															"",
															"pm.test(`fulfil.fulfilment is not null`, function () {",
															"    pm.expect(jsonData.fulfil.fulfilment).to.not.equal(null);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"acceptQuote\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://kameeza.hipipo.mojaloop-hackathon.io:4401/requestToPayTransfer/{{transactionRequestId}}",
													"protocol": "http",
													"host": [
														"kameeza",
														"hipipo",
														"mojaloop-hackathon",
														"io"
													],
													"port": "4401",
													"path": [
														"requestToPayTransfer",
														"{{transactionRequestId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Group-2-EUR",
			"item": [
				{
					"name": "connectivity_test",
					"item": [
						{
							"name": "alpteqictsols-to-testfsp3-MSISDN(EUR)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7b94dbd5-4504-4244-b4cd-c8ac20e722f0",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
											"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ae89844e-9914-4e6a-b824-0d5752f885a3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"978111111111\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"498941207269\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"EUR\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://alpteqictsols.hipipo.mojaloop-hackathon.io:4001/transfers",
									"protocol": "http",
									"host": [
										"alpteqictsols",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4001",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "affinity-to-testfsp3-MSISDN(EUR)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1267ccb9-b37f-4517-b61c-15cefabd7763",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
											"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "37686503-ec69-4fbd-9e5c-2d56af4e70b7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"978222222222\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"498941207269\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"EUR\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://affinity.hipipo.mojaloop-hackathon.io:4101/transfers",
									"protocol": "http",
									"host": [
										"affinity",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4101",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "skycode-to-testfsp3-MSISDN(EUR)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "48809512-b202-4d0d-a0a9-c7bc6ec9eb64",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
											"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "957dea7d-abce-46ba-953c-dbbd6242a00b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"978333333333\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"498941207269\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"EUR\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://alpteqictsols.hipipo.mojaloop-hackathon.io:4001/transfers",
									"protocol": "http",
									"host": [
										"alpteqictsols",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4001",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "teamtime-to-testfsp3-MSISDN(EUR)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8243db6b-729f-466f-a950-d845f552692c",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
											"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5a3ba6e1-f9bf-42fe-9282-55ac939c2f67",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"978444444444\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"498941207269\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"EUR\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://teamtime.hipipo.mojaloop-hackathon.io:4301/transfers",
									"protocol": "http",
									"host": [
										"teamtime",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4301",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "kuzimba-to-testfsp3-MSISDN(EUR)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "044800e6-d699-4bd8-83e0-4f5a32d9733a",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
											"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e0e26ea9-7aea-49fa-83f3-7621ffa6c721",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\" transferState is COMMITTED\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
											"});",
											"",
											"pm.test(\" Fulfilment is not empty\", function () {",
											"var jsonData = pm.response.json();",
											"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
											"",
											"});",
											"  ",
											"  ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0",
										"disabled": true
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transferDate}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}",
										"disabled": true
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"from\": {\n        \"displayName\": \"PayerFirst PayerLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"978555555555\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"498941207269\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"EUR\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
								},
								"url": {
									"raw": "http://kuzimba.hipipo.mojaloop-hackathon.io:4401/transfers",
									"protocol": "http",
									"host": [
										"kuzimba",
										"hipipo",
										"mojaloop-hackathon",
										"io"
									],
									"port": "4401",
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "p2p_interoperable",
					"item": [
						{
							"name": "msisdn-to-msisdn",
							"item": [
								{
									"name": "alpteqictsols-to-skycode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "67c69500-2356-4e54-a0bd-2cf88c76c16b",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "496cad6d-c8cf-4c73-9608-a299180a0354",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"from\": {\n        \"displayName\": \"alpteqictsolsFirst alpteqictsolsLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"978111111111\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"978333333333\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"EUR\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
										},
										"url": {
											"raw": "http://alpteqictsols.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"alpteqictsols",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "msisdn-to-bankaccount",
							"item": [
								{
									"name": "alpteqictsols-to-skycode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "278eeb97-203d-4216-9111-aa371ad20297",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "92f48140-85c0-4e46-b0c0-0a393a6c0a05",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"from\": {\n        \"displayName\": \"alpteqictsolsFirst alpteqictsolsLast\",\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"978111111111\"\n    },\n    \"to\": {\n        \"idType\": \"ACCOUNT_ID\",\n        \"idValue\": \"ACC033333\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"EUR\",\n    \"amount\": \"10\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"note\": \"test payment\",\n    \"homeTransactionId\": \"{{$guid}}\"\n}"
										},
										"url": {
											"raw": "http://alpteqictsols.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"alpteqictsols",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "p2p_forex",
					"item": [
						{
							"name": "EUR-to-ZMW",
							"item": [
								{
									"name": "affinity-to-greengrab(EUR to ZMW) SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f58eb543-40a3-4964-a1a3-e49477bb02fe",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"pm.variables.set('expectedtestfsp4FirstName', 'Testfsp4First');",
													"pm.variables.set('expectedtestfsp4LastName', 'Testfsp4Last');",
													"pm.variables.set('expectedtestfsp4DOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9952807c-9bdd-44d9-b0cc-c8f96bf60ebf",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" quote extensions are returned\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteRequestExtensions).not.eql(null);",
													"});",
													"",
													"pm.test(\" Payee receive amount is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.payeeReceiveAmount).not.eql(null);",
													"});",
													"",
													"pm.test(\" forex rate is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteResponse.extensionList.extension.value).not.eql(null);",
													"});",
													"",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "emoments",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "payeefsp",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"from\": {\n\t\t\"displayName\": \"affinityFirst affinityLast\",\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"978222222222\",\n\t\t\"firstName\": \"affinityFirst\",\n\t\t\"lastName\": \"affinityLast\",\n\t\t\"dateOfBirth\": \"2010-10-10\"\n\t},\n\t\"to\": {\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"260111111111\"\n\t},\n\t\"amountType\": \"SEND\",\n\t\"currency\": \"EUR\",\n\t\"amount\": \"10\",\n\t\"transactionType\": \"TRANSFER\",\n\t\"initiatorType\": \"CONSUMER\",\n\t\"note\": \"test payment\",\n\t\"homeTransactionId\": \"123ABC\",\n\t\"quoteRequestExtensions\": [\n\t\t{\n\t\t\t\"key\": \"KYCPayerTier\",\n\t\t\t\"value\": \"1\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCNationality\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCOccupation\",\n\t\t\t\"value\": \"Engineer\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmployerName\",\n\t\t\t\"value\": \"Example Corp\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCContactPhone\",\n\t\t\t\"value\": \"1122334455\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmailAddress\",\n\t\t\t\"value\": \"user@mail.com\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCBirthCountry\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress1\",\n\t\t\t\"value\": \"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress2\",\n\t\t\t\"value\": \"11 BP 202 Abidjan 11\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCity\",\n\t\t\t\"value\": \"Abidjan\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCode\",\n\t\t\t\"value\": \"NE1 3TQ\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDType\",\n\t\t\t\"value\": \"PASSPORT\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDValue\",\n\t\t\t\"value\": \"770423742\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerTransferReason\",\n\t\t\t\"value\": \"Bill payment\"\n\t\t}\n\t]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "http://affinity.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"affinity",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "affinity-to-greengrab(EUR to ZMW) RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7c2b8b76-eda6-47fb-8d1e-4fd2c2266e0e",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"pm.variables.set('expectedtestfsp4FirstName', 'Testfsp4First');",
													"pm.variables.set('expectedtestfsp4LastName', 'Testfsp4Last');",
													"pm.variables.set('expectedtestfsp4DOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a4a580c8-7ef4-46a2-8608-951c680b4432",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" quote extensions are returned\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteRequestExtensions).not.eql(null);",
													"});",
													"",
													"pm.test(\" Payee receive amount is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.payeeReceiveAmount).not.eql(null);",
													"});",
													"",
													"pm.test(\" forex rate is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteResponse.extensionList.extension.value).not.eql(null);",
													"});",
													"",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "emoments",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "payeefsp",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"from\": {\n\t\t\"displayName\": \"affinityFirst affinityLast\",\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"978222222222\",\n\t\t\"firstName\": \"affinityFirst\",\n\t\t\"lastName\": \"affinityLast\",\n\t\t\"dateOfBirth\": \"2010-10-10\"\n\t},\n\t\"to\": {\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"260111111111\"\n\t},\n\t\"amountType\": \"SEND\",\n\t\"currency\": \"EUR\",\n\t\"amount\": \"10\",\n\t\"transactionType\": \"TRANSFER\",\n\t\"initiatorType\": \"CONSUMER\",\n\t\"note\": \"test payment\",\n\t\"homeTransactionId\": \"123ABC\",\n\t\"quoteRequestExtensions\": [\n\t\t{\n\t\t\t\"key\": \"KYCPayerTier\",\n\t\t\t\"value\": \"1\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCNationality\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCOccupation\",\n\t\t\t\"value\": \"Engineer\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmployerName\",\n\t\t\t\"value\": \"Example Corp\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCContactPhone\",\n\t\t\t\"value\": \"1122334455\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmailAddress\",\n\t\t\t\"value\": \"user@mail.com\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCBirthCountry\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress1\",\n\t\t\t\"value\": \"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress2\",\n\t\t\t\"value\": \"11 BP 202 Abidjan 11\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCity\",\n\t\t\t\"value\": \"Abidjan\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCode\",\n\t\t\t\"value\": \"NE1 3TQ\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDType\",\n\t\t\t\"value\": \"PASSPORT\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDValue\",\n\t\t\t\"value\": \"770423742\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerTransferReason\",\n\t\t\t\"value\": \"Bill payment\"\n\t\t}\n\t]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "http://affinity.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"affinity",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "EUR-to-UGX",
							"item": [
								{
									"name": "kuzumba-to-wsacco(EUR to UGX) SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "215e437f-48c7-4e9b-ace6-159589738878",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"pm.variables.set('expectedtestfsp4FirstName', 'Testfsp4First');",
													"pm.variables.set('expectedtestfsp4LastName', 'Testfsp4Last');",
													"pm.variables.set('expectedtestfsp4DOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a7322bda-6072-4f8b-803a-4a3022c3f45d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" quote extensions are returned\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteRequestExtensions).not.eql(null);",
													"});",
													"",
													"pm.test(\" Payee receive amount is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.payeeReceiveAmount).not.eql(null);",
													"});",
													"",
													"pm.test(\" forex rate is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteResponse.extensionList.extension.value).not.eql(null);",
													"});",
													"",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "emoments",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "payeefsp",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"from\": {\n\t\t\"displayName\": \"affinityFirst affinityLast\",\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"978555555555\",\n\t\t\"firstName\": \"affinityFirst\",\n\t\t\"lastName\": \"affinityLast\",\n\t\t\"dateOfBirth\": \"2010-10-10\"\n\t},\n\t\"to\": {\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"256444444444\"\n\t},\n\t\"amountType\": \"SEND\",\n\t\"currency\": \"EUR\",\n\t\"amount\": \"10\",\n\t\"transactionType\": \"TRANSFER\",\n\t\"initiatorType\": \"CONSUMER\",\n\t\"note\": \"test payment\",\n\t\"homeTransactionId\": \"123ABC\",\n\t\"quoteRequestExtensions\": [\n\t\t{\n\t\t\t\"key\": \"KYCPayerTier\",\n\t\t\t\"value\": \"1\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCNationality\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCOccupation\",\n\t\t\t\"value\": \"Engineer\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmployerName\",\n\t\t\t\"value\": \"Example Corp\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCContactPhone\",\n\t\t\t\"value\": \"1122334455\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmailAddress\",\n\t\t\t\"value\": \"user@mail.com\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCBirthCountry\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress1\",\n\t\t\t\"value\": \"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress2\",\n\t\t\t\"value\": \"11 BP 202 Abidjan 11\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCity\",\n\t\t\t\"value\": \"Abidjan\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCode\",\n\t\t\t\"value\": \"NE1 3TQ\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDType\",\n\t\t\t\"value\": \"PASSPORT\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDValue\",\n\t\t\t\"value\": \"770423742\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerTransferReason\",\n\t\t\t\"value\": \"Bill payment\"\n\t\t}\n\t]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "http://kuzimba.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"kuzimba",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "kuzumba-to-wsacco(EUR to UGX) RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "48c41e29-d6a5-4f96-bcad-7bdd702a8140",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"pm.variables.set('expectedtestfsp4FirstName', 'Testfsp4First');",
													"pm.variables.set('expectedtestfsp4LastName', 'Testfsp4Last');",
													"pm.variables.set('expectedtestfsp4DOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b81d9ade-2829-422e-aaba-1498e1fe42b6",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\" quote extensions are returned\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteRequestExtensions).not.eql(null);",
													"});",
													"",
													"pm.test(\" Payee receive amount is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.payeeReceiveAmount).not.eql(null);",
													"});",
													"",
													"pm.test(\" forex rate is present\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.quoteResponse.extensionList.extension.value).not.eql(null);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transferDate}}",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "emoments",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "payeefsp",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"from\": {\n\t\t\"displayName\": \"affinityFirst affinityLast\",\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"978555555555\",\n\t\t\"firstName\": \"affinityFirst\",\n\t\t\"lastName\": \"affinityLast\",\n\t\t\"dateOfBirth\": \"2010-10-10\"\n\t},\n\t\"to\": {\n\t\t\"idType\": \"MSISDN\",\n\t\t\"idValue\": \"256444444444\"\n\t},\n\t\"amountType\": \"RECEIVE\",\n\t\"currency\": \"UGX\",\n\t\"amount\": \"10\",\n\t\"transactionType\": \"TRANSFER\",\n\t\"initiatorType\": \"CONSUMER\",\n\t\"note\": \"test payment\",\n\t\"homeTransactionId\": \"123ABC\",\n\t\"quoteRequestExtensions\": [\n\t\t{\n\t\t\t\"key\": \"KYCPayerTier\",\n\t\t\t\"value\": \"1\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCNationality\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCOccupation\",\n\t\t\t\"value\": \"Engineer\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmployerName\",\n\t\t\t\"value\": \"Example Corp\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCContactPhone\",\n\t\t\t\"value\": \"1122334455\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCEmailAddress\",\n\t\t\t\"value\": \"user@mail.com\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCBirthCountry\",\n\t\t\t\"value\": \"CI\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress1\",\n\t\t\t\"value\": \"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddress2\",\n\t\t\t\"value\": \"11 BP 202 Abidjan 11\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCity\",\n\t\t\t\"value\": \"Abidjan\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerAddressCode\",\n\t\t\t\"value\": \"NE1 3TQ\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDType\",\n\t\t\t\"value\": \"PASSPORT\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerIDValue\",\n\t\t\t\"value\": \"770423742\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"KYCPayerTransferReason\",\n\t\t\t\"value\": \"Bill payment\"\n\t\t}\n\t]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "http://kuzimba.hipipo.mojaloop-hackathon.io:4001/transfers",
											"protocol": "http",
											"host": [
												"kuzimba",
												"hipipo",
												"mojaloop-hackathon",
												"io"
											],
											"port": "4001",
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "payee_initiated_payments",
					"item": [
						{
							"name": "business",
							"item": [
								{
									"name": "alpteqictsols-to-teamtime",
									"item": [
										{
											"name": "alpteqictsols-to-teamtime- POST /requestToPay",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e203402d-3246-4c47-afb7-b89856ad980f",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"",
															"pm.test(`homeTransactionId is: ${pm.variables.get('homeTransactionId')}`, function () {",
															"    pm.expect(jsonData.homeTransactionId).to.eql(pm.variables.get('homeTransactionId'));",
															"});",
															"",
															"pm.test(`from.idType is BUSINESS`, function () {",
															"    pm.expect(jsonData.from.idType).to.eql('BUSINESS');",
															"    pm.environment.set('requestToPayInitiatorIdType',jsonData.from.idType);",
															"});",
															"",
															"",
															"pm.test(`to.idType is MSISDN`, function () {",
															"    pm.expect(jsonData.to.idType).to.eql('MSISDN');",
															"});",
															"",
															"",
															"pm.test(`amountType is SEND`, function () {",
															"    pm.expect(jsonData.amountType).to.eql('SEND');",
															"});",
															"",
															"pm.test(`currency is EUR`, function () {",
															"    pm.expect(jsonData.currency).to.eql ('EUR');",
															"});",
															"",
															"pm.test(`amount is 10`, function () {",
															"    pm.expect(jsonData.amount).to.eql('10');",
															"});",
															"",
															"pm.test(`scenario is PAYMENT`, function () {",
															"    pm.expect(jsonData.scenario).to.eql('PAYMENT');",
															"});",
															"",
															"pm.test(`initiator is PAYEE`, function () {",
															"    pm.expect(jsonData.initiator).to.eql('PAYEE');",
															"});",
															"",
															"pm.test(`initiatorType is BUSINESS`, function () {",
															"    pm.expect(jsonData.initiatorType).to.eql('BUSINESS');",
															"});",
															"",
															"pm.test(`transactionRequestId is not null`, function () {",
															"    pm.expect(jsonData.transactionRequestId).to.not.equal('');",
															"    pm.environment.set('transactionRequestId',jsonData.transactionRequestId);",
															"});",
															"",
															"pm.test(`currentState is COMPLETED`, function () {",
															"    pm.expect(jsonData.currentState).to.eql('COMPLETED');",
															"});",
															"",
															"pm.test(`requestToPayState is RECEIVED`, function () {",
															"    pm.expect(jsonData.requestToPayState).to.eql('RECEIVED');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "77b3fd79-b824-4549-9ab3-bb5a6b7799cd",
														"exec": [
															"",
															"var uuid = require('uuid');",
															"pm.variables.set('homeTransactionId',uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"homeTransactionId\": \"{{homeTransactionId}}\",\n    \"from\": {\n        \"idType\": \"BUSINESS\",\n        \"idValue\": \"alpteqictsolsMerchant\",\n        \"displayName\": \"Alpteqictsols Solutions\"\n    },\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"978444444444\"\n    },\n    \"amountType\": \"SEND\",\n    \"currency\": \"EUR\",\n    \"amount\": \"10\",\n    \"scenario\":\"PAYMENT\",\n    \"initiator\":\"PAYEE\",\n    \"initiatorType\":\"BUSINESS\",\n    \"note\": \"test payment\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://alpteqictsols.hipipo.mojaloop-hackathon.io:4001/requestToPay",
													"protocol": "http",
													"host": [
														"alpteqictsols",
														"hipipo",
														"mojaloop-hackathon",
														"io"
													],
													"port": "4001",
													"path": [
														"requestToPay"
													]
												}
											},
											"response": []
										},
										{
											"name": "teamtime - POST /requestToPayTransfer SEND",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d4c3b6b7-b966-4eea-82b2-262e82139c48",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"",
															"pm.environment.set('transferId',jsonData.transferId);",
															"",
															"pm.test(`requestToPayTransactionId is: ${pm.variables.get('transactionRequestId')}`, function () {",
															"    pm.expect(jsonData.requestToPayTransactionId).to.eql(pm.variables.get('transactionRequestId'));",
															"});",
															"",
															"pm.test(`from.idType is MSISDN`, function () {",
															"    pm.expect(jsonData.from.idType).to.eql('MSISDN');",
															"});",
															"",
															"",
															"pm.test(`to.idType is BUSINESS`, function () {",
															"    pm.expect(jsonData.to.idType).to.eql('BUSINESS');",
															"});",
															"",
															"",
															"",
															"pm.test(`amountType is SEND`, function () {",
															"    pm.expect(jsonData.amountType).to.eql('SEND');",
															"});",
															"",
															"pm.test(`currency is EUR}`, function () {",
															"    pm.expect(jsonData.currency).to.eql ('EUR');",
															"});",
															"",
															"",
															"pm.test(`scenario is PAYMENT`, function () {",
															"    pm.expect(jsonData.scenario).to.eql('PAYMENT');",
															"});",
															"",
															"pm.test(`initiator is PAYEE`, function () {",
															"    pm.expect(jsonData.initiator).to.eql('PAYEE');",
															"});",
															"",
															"pm.test(`initiatorType is BUSINESS`, function () {",
															"    pm.expect(jsonData.initiatorType).to.eql('BUSINESS');",
															"});",
															"",
															"pm.test(`currentState is WAITING_FOR_QUOTE_ACCEPTANCE`, function () {",
															"    pm.expect(jsonData.currentState).to.eql('WAITING_FOR_QUOTE_ACCEPTANCE');",
															"});",
															"",
															"pm.test(`quoteResponse is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.transferAmount.currency is EUR}`, function () {",
															"    pm.expect(jsonData.quoteResponse.transferAmount.currency).to.eql('EUR');",
															"});",
															"",
															"pm.test(`quoteResponse.expiration is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.expiration).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.ilpPacket is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.ilpPacket).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.condition is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.condition).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.payeeFspFee is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.payeeFspFee).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.payeeFspCommission is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.payeeFspCommission).to.not.equal(null);",
															"});",
															"",
															"pm.test(`fulfil is  null`, function () {",
															"    pm.expect(jsonData.fulfil).to.equal(undefined);",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"requestToPayTransactionId\": \"{{transactionRequestId}}\",\n  \"from\": {\n    \"displayName\": \"Teamtime\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"978444444444\"\n  },\n  \"to\": {\n    \"idType\": \"{{requestToPayInitiatorIdType}}\",\n    \"idValue\": \"Alpteqictsols\",\n    \"fspId\": \"alpteqictsols\"\n  },\n  \"amountType\": \"SEND\",\n  \"currency\": \"EUR\",\n  \"amount\": \"10\",\n  \"scenario\":\"PAYMENT\",\n  \"initiator\":\"PAYEE\",\n  \"initiatorType\":\"BUSINESS\",\n  \"note\": \"test payment\"\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://teamtime.hipipo.mojaloop-hackathon.io:4301/requestToPayTransfer",
													"protocol": "http",
													"host": [
														"teamtime",
														"hipipo",
														"mojaloop-hackathon",
														"io"
													],
													"port": "4301",
													"path": [
														"requestToPayTransfer"
													]
												}
											},
											"response": []
										},
										{
											"name": "teamtime - PUT /requestToPayTransfer/{Id}",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "afd96dc9-8f8d-455a-a96b-4b5d917f108e",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"",
															"pm.environment.set('transferId',jsonData.transferId);",
															"",
															"pm.test(`requestToPayTransactionId is: ${pm.variables.get('transactionRequestId')}`, function () {",
															"    pm.expect(jsonData.requestToPayTransactionId).to.eql(pm.variables.get('transactionRequestId'));",
															"});",
															"",
															"pm.test(`from.idType is MSISDN`, function () {",
															"    pm.expect(jsonData.from.idType).to.eql('MSISDN');",
															"});",
															"",
															"pm.test(`to.idType is BISUNESS`, function () {",
															"    pm.expect(jsonData.to.idType).to.eql('BUSINESS');",
															"});",
															"",
															"",
															"pm.test(`amountType is SEND`, function () {",
															"    pm.expect(jsonData.amountType).to.eql('SEND');",
															"});",
															"",
															"pm.test(`currency is EUR`, function () {",
															"    pm.expect(jsonData.currency).to.eql('EUR');",
															"});",
															"",
															"pm.test(`scenario is PAYMENT`, function () {",
															"    pm.expect(jsonData.scenario).to.eql('PAYMENT');",
															"});",
															"",
															"pm.test(`initiator is PAYEE`, function () {",
															"    pm.expect(jsonData.initiator).to.eql('PAYEE');",
															"});",
															"",
															"pm.test(`initiatorType is BUSINESS`, function () {",
															"    pm.expect(jsonData.initiatorType).to.eql('BUSINESS');",
															"});",
															"",
															"pm.test(`currentState is COMPLETED`, function () {",
															"    pm.expect(jsonData.currentState).to.eql('COMPLETED');",
															"});",
															"",
															"pm.test(`quoteResponse is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.transferAmount.currency is EUR}`, function () {",
															"    pm.expect(jsonData.quoteResponse.transferAmount.currency).to.eql('EUR');",
															"});",
															"",
															"pm.test(`quoteResponse.expiration is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.expiration).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.ilpPacket is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.ilpPacket).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.condition is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.condition).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.payeeFspFee is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.payeeFspFee).to.not.equal(null);",
															"});",
															"",
															"pm.test(`quoteResponse.payeeFspCommission is not null`, function () {",
															"    pm.expect(jsonData.quoteResponse.payeeFspCommission).to.not.equal(null);",
															"});",
															"",
															"pm.test(`otpResponse is null`, function () {",
															"    pm.expect(jsonData.otpResponse).to.eql(undefined);",
															"});",
															"",
															"pm.test(`fulfil is not null`, function () {",
															"    pm.expect(jsonData.fulfil).to.not.equal(null);",
															"});",
															"",
															"pm.test(`fulfil.completedTimestamp is not null`, function () {",
															"    pm.expect(jsonData.fulfil.completedTimestamp).to.not.equal(null);",
															"});",
															"",
															"pm.test(`fulfil.transferState is COMMITTED`, function () {",
															"    pm.expect(jsonData.fulfil.transferState).to.eql('COMMITTED');",
															"});",
															"",
															"pm.test(`fulfil.fulfilment is not null`, function () {",
															"    pm.expect(jsonData.fulfil.fulfilment).to.not.equal(null);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"acceptQuote\": true\n}\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://teamtime.hipipo.mojaloop-hackathon.io:4301/requestToPayTransfer/{{transactionRequestId}}",
													"protocol": "http",
													"host": [
														"teamtime",
														"hipipo",
														"mojaloop-hackathon",
														"io"
													],
													"port": "4301",
													"path": [
														"requestToPayTransfer",
														"{{transactionRequestId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4123962e-4953-4d38-8ad0-c2434dd0ebf1",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "e932d277-4c3e-4691-b960-6fdc82657aa8",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}